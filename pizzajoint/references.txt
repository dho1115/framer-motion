FRAMER MOTION REFERENCES: 

#ToAninmate(start)
(1) Import motion.
(2) To make anything "animatable", just add "motion." next to the element. Example: <motion.h3></motion.h3>, <motion.div></motion.div>, <motion.p></motion.p>. This will add framer motion animating properties.
(3) Inside the <motion.[component name]></motion.[component name]>, add the following prop: animate={{ fontSize: 50 }}. So, in this example, the fontSize would be animated to 50. So, if the element we want to aninate is, say, a div:
<motion.div animate={{ fontSize: 50 }}></motion.div>
(4) You can add x or y properties inside animate={{ }} to move it left or right: 
animate={{ x: 105 }}.

#Initial.
Allows us to set an INITIAL state from which the element animates. So, when you do:
initial={{x: 15}}
animate={{x: 157}}
15 is where you animate FROM and 157 is where you animate TO.

#animating x:0.
When we say: animate={{x: 0}} we do not mean that the element that animate={{x: 0}} starts at 0. What it actually means is to MOVE x zero (0) positions from where it normally is at.

#type tween.
The animation will not have the "bounce" effect that you would normally see with the default "spring".

#stiffness.
The stiffness property only works with type: "spring". The higher the spring, the more "bounce" it will have. transition={{ type: 'spring', stiffness: 350 }}. Again, you MUST have a type: 'spring'. Default spring is about 100.

#duration.
The transition type {{ duration: 3.5 }} ONLY works on a type: "tween":
transition={{ type: 'tween', duration: 3.5 }}

#origin.
When you scale, it will scale, but buy default, it will also move to the left unless you add inside the whileHover an originX of 0.

#variants.
This allows you to move your animatable properties outside the component and into an object. The keys "hidden" and "visible" are arbitrary names. You do not have to call them "hidden" or "visible". You can call it "init", "animate" or anything you want.

To create a variant, you need to:
(1) Create a variant object: const variantObject = { hidden: { properties }, visible: { properties} }.
(2) Inside the element you applied the "motion" prefix to, add a 'variants' prop:
<motion.div variants={variantObject}>...</motion.div>
(3) Add this to the initial and animate props:
<motion.div variants={variantsObject} initial={hidden} animate={visible}></motion.div>
(4) If there is a transition, it would go inside the 'visible' object b/c that is the object we want the transition to occur.

Note about variants:
The "visible" and "hidden" properties from parent automatically are passed to the children.
So, basically, the if the properties in the nextVariants (children) were NOT called "visible" and "hidden" and were named something differently, it would not work.